openapi: 3.0.0
info:
  description: |
    swagger for music-service
  version: "1.0.0"
  title: Swagger For Validus Music-Service
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: skondapalli89@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  # - description: SwaggerHub API Auto Mocking
  #   url: https://virtserver.swaggerhub.com/satya4/music-service/1.0.0
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    # url: https://virtserver.swaggerhub.com/satya4/music-service/1.0.0
  - url: 'https://localhost:8080/music-service/api'
# tags:
#   - name: Album
#     description: Everything about validus Album
#   - name: Artist
#     description: Access to Validus Artist
#   - name: Song
#     description: Operations about songs
paths:

  /artist:
    post:
      tags:
       - "artist"
      summary: "Add a new Artist to the Music-Service"
      description: ""
      operationId: "addArtist"
      requestBody:
        $ref: '#/components/requestBodies/Artist'
      responses:
        "405":
          description: "Invalid input"
        "201": 
          description: "Artist created"
        "400":
          description: "Invalid input/Bad Request"

  '/artist/all':
    get: 
      tags: 
        - artist
      summary: find all artist
      description: returns all artists
      operationId: getAllArtist
      responses:
         '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'

  '/artist/id/{artistId}':
    get:
      tags:
        - artist
      summary: Find Artist by ID
      description: Returns a single Artist
      operationId: getArtistById
      parameters:
        - name: artistId
          in: path
          description: ID of artist to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Artist not found
    delete:
      tags:
        - artist
      summary: Deletes a artist
      operationId: del artist
      parameters:
        - name: artistId
          in: path
          description: artist id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Artist not found
        '200':
          description: successful operation
    put:
      tags:
        - artist
      summary: Modify a Aritst
      operationId: Modify Artist
      parameters:
        - name: artistId
          in: path
          description: Album id to modify
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Artist'
      responses:
        '400':
          description: Invalid ID supplied
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
 
  '/artist/album/id/{albumId}':
    get:
      tags:
        - artist
      summary: Find Artist By Album Id
      description: Returns All Artists
      operationId: getArtistsByAlbumId
      parameters:
        - name: albumId
          in: path
          description: ID of album to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found

  '/artist/album/name/{albumName}':
    get:
      tags:
        - artist
      summary: Find Artist By Album Name
      description: Returns All Artists
      operationId: getArtistsByAlbumName
      parameters:
        - name: albumName
          in: path
          description: Name of album to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found

  '/artist/album/yearReleased/{yearReleased}':
    get:
      tags:
        - artist
      summary: Find Artist By Albums Year Released
      description: Returns All Artists
      operationId: getArtistsByAlbYearReleased
      parameters:
        - name: yearReleased
          in: path
          description: yearReleased of album to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found

  '/artist/song/id/{id}':
    get:
      tags:
        - artist
      summary: Find Artists By Song Id
      description: Returns All Artists
      operationId: getArtistsBySongId
      parameters:
        - name: id
          in: path
          description: id of song to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found

  '/artist/song/name/{name}':
    get:
      tags:
        - artist
      summary: Find Artists By Song Name
      description: Returns All Artists
      operationId: getArtistsBySongName
      parameters:
        - name: name
          in: path
          description: id of song to search for 
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found

  '/artist/song/track/{trackId}':
    get:
      tags:
        - artist
      summary: Find Artists By Song TrackId
      description: Returns All Artists
      operationId: getArtistsBySongTrackId
      parameters:
        - name: trackId
          in: path
          description: id of song to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found

#---------------------------------------------
  '/album':
    post:
      tags:
       - "album"
      summary: "Add a new Album to the Music-Service"
      description: ""
      operationId: "addAlbum"
      requestBody:
        $ref: '#/components/requestBodies/Album'
      responses:
        "405":
          description: "Invalid input"
        "201": 
          description: "Album created"

  '/album/all':
    get: 
      tags: 
        - album
      summary: find all Albums
      description: returns all albums
      operationId: getAllAlbums
      responses:
         '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

  '/album/id/{albumId}':
    get:
      tags:
        - album
      summary: Find Album by ID
      description: Returns a single Album
      operationId: getAlbumById
      parameters:
        - name: albumId
          in: path
          description: ID of album to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found
    delete:
      tags:
        - album
      summary: Deletes a album
      operationId: del album
      parameters:
        - name: albumId
          in: path
          description: album id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Album not found
        '200':
          description: successful operation
    put:
      tags:
        - album
      summary: Modify a Album
      operationId: Modify Album
      parameters:
        - name: albumId
          in: path
          description: Album id to modify
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Album'
      responses:
        '400':
          description: Invalid ID supplied
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'

  '/album/song/id/{id}':
    get:
      tags:
        - album
      summary: Find  Album By song Id
      description: Returns Album
      operationId: getAlbumsBySongId
      parameters:
        - name: id
          in: path
          description: songId 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid Song Id supplied
        '404':
          description: Albums not found

  '/album/song/name/{name}':
    get:
      tags:
        - album
      summary: Find  Album By song Nmae
      description: Returns Album
      operationId: getAlbumsBySongName
      parameters:
        - name: name
          in: path
          description: song name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid Song Name supplied
        '404':
          description: Albums not found
 
  '/album/song/track/{trackId}':
    get:
      tags:
        - album
      summary: Find  All Album By song Track ID
      description: Returns Album
      operationId: getAlbumsBySongNameTrack
      parameters:
        - name: trackId
          in: path
          description: song track id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          description: Invalid Song Track supplied
        '404':
          description: Albums not found



  '/album/yearReleased/{yearReleased}':
    get:
      tags:
        - album
      summary: Find All Albums By Year Released
      description: Returns List of Albums
      operationId: getAlbumsByYearReleased
      parameters:
        - name: yearReleased
          in: path
          description: Year Released 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Album'
        '400':
          description: Invalid Year Released supplied
        '404':
          description: Albums not found
  
  '/album/name/{albumName}':
    get:
      tags:
        - album
      summary: Find Album by Name
      description: Returns a single Album
      operationId: getAlbumByName
      parameters:
        - name: albumName
          in: path
          description: Name of album to search for 
          required: true
          schema:
            type: string
            example: albumName
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid Song Name supplied
        '404':
          description: Song not found


#-------------------------------------------------
 
  /song:
    post:
      tags:
       - "song"
      summary: "Add a new Song to the Music-Service"
      description: ""
      operationId: "addSong"
      requestBody:
        $ref: '#/components/requestBodies/Song'
      responses:
        "405":
          description: "Invalid input"
        "201": 
          description: "Song created"
 
 
  '/song/all':
    get: 
      tags: 
        - song
      summary: find all songs
      description: returns all songs
      operationId: getAllsongs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

  '/song/id/{songId}':
    get:
      tags:
        - song
      summary: Find Song by ID
      description: Returns a single Song
      operationId: getSongById
      parameters:
        - name: songId
          in: path
          description: ID of Song to search for 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
    delete:
      tags:
        - song
      summary: Deletes a Song
      operationId: del Song
      parameters:
        - name: songId
          in: path
          description: Song id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Song not found
        '200':
          description: successful operation
    put:
      tags:
        - song
      summary: Modify a Song
      operationId: Modify Song
      parameters:
        - name: songId
          in: path
          description: Song id to modify
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Song'
      responses:
        '400':
          description: Invalid ID supplied
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'

  '/song/name/{songName}':
    get:
      tags:
        - song
      summary: Find Song by Name
      description: Returns a single Song
      operationId: getSongByName
      parameters:
        - name: songName
          in: path
          description: Name of Song to search for 
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Invalid Song Name supplied
        '404':
          description: Song not found

  '/song/track/{trackId}':
    get:
      tags:
        - song
      summary: Find All songs With the track Id
      description: Returns List of Songs
      operationId: getSongByTrackId
      parameters:
        - name: trackId
          in: path
          description: TrackId of the Song 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Song'
        '400':
          description: Invalid Song Track supplied
        '404':
          description: Songs not found
  
 
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Song:
      type: object
      properties:
        song_id:
          type: integer
          format: int64
          example: 123
        track_id:
          type: integer
          format: int64
          example: 321
        song_name: 
          type: string
          format: string
          example: new Hurray Song!!!
    Album:
      type: object
      properties:
        album_id:
          type: integer
          format: int64
          example: 123434
        album_name:
          type: string
          example: new Album
        songs: 
          type: array
          items:
              $ref: '#/components/schemas/Song'
    Artist:
      type: object
      properties:
        artist_id:
          type: integer
          format: int64
          example: 123434
        artist_name:
          type: string
          example: new Artist
        albums: 
          type: array
          items:
              $ref: '#/components/schemas/Album'
  requestBodies:
    Artist: 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Artist'
    Album: 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Album'
    Song: 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Song'
      required: true