swagger: "2.0"
info:
  description: "Swagger for Validus Music Service"
  version: "1.0.0"
  title: "Validus Music Service"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "skondapalli89@gmail.com"
  # license:
  #   name: "Apache 2.0"
  #   url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "petstore.swagger.io"
basePath: "/api"
tags:
- name: "Artist"
  description: "Everything about Artist"
  # externalDocs:
  #   description: "Find out more"
  #   url: "http://swagger.io"
- name: "Album"
  description: "Access to Validus Music Albums"
- name: "Song"
  description: "Access to Validus Music songs"
  # externalDocs:
  #   description: "Find out more about our store"
    # url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
###CREATE THE ARTIST
  /artist:
    post:
      tags:
       - "artist"
      summary: "Add a new Artist to the Music-Service"
      description: ""
      operationId: "addArtist"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Artist object that needs to be added to the Music Service"
        required: true
        schema:
          $ref: "#/definitions/Artist"
      responses:
        "405":
          description: "Invalid input"
        "201": 
          description: "Artist created"


###CREATE THE SONG
  /song:
    post:
      tags:
       - "song"
      summary: "Add a new Song to the Music-Service"
      description: ""
      operationId: "addSong"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Song object that needs to be added to the Music Service"
        required: true
        schema:
          $ref: "#/definitions/Song"
      responses:
        "405":
          description: "Invalid input"
        "201": 
          description: "song created"

## Search for a Song By Id
  /song/id/{song_id}:
    get:
      tags:
      - "song"
      summary: "Find Song by ID"
      description: "Returns a single Song"
      operationId: "getSongById"
      produces:
      - "application/json"
      parameters:
      - name: "song_id"
        in: "path"
        description: "ID of Song to Delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Song"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "No Song found"
    delete:
      tags:
      - "song"
      summary: "Deletes a Song By Song ID"
      description: "Delete Song By Song Id"
      operationId: "deleteSong"
      produces:
      - "application/json"
      parameters:
      - name: "song_id"
        in: "path"
        description: "ID of Song to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "No Song found"

##Search for a Song
  /song/name/{song_name}:
    get:
      tags:
      - "song"
      summary: "Find Song by Name"
      description: "Returns a single Song"
      operationId: "getSongBySongName"
      produces:
      - "application/json"
      parameters:
      - name: "song_name"
        in: "path"
        description: "Name of Song to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Song"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Song found"

##Search Song By TrackId
  /song/track/{track_id}:
    get:
      tags:
      - "song"
      summary: "Find Songs By Tracks"
      description: "Find Songs By A Track Id"
      operationId: "Find Songs By Tracks"
      produces:
      - "application/json"
      parameters:
      - name: "track_id"
        in: "path"
        description: "Search By Tracks"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Song"
        "400":
          description: "Invalid status value"

##Update the Song
  /song/update/{song_id}:
    put:
      tags:
      - "song"
      summary: "Update Song"
      description: "Update the existing Song"
      operationId: "Update Song"
      produces:
      - "application/json"
      parameters:
      - name: "song_id"
        in: "path"
        description: "provide the song_id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Song object that needs to be added to the Service"
        required: true
        schema:
          $ref: "#/definitions/Song"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Song"
        "400":
          description: "Invalid status value"

  ###Find all Songs
  /song/all/:
    get:
      tags:
      - "song"
      summary: "Find All Songs"
      description: "Find All Songs"
      operationId: "Find All Songs"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Song"

###CREATE THE ALBUM
  /album:
    post:
      tags:
       - "album"
      summary: "Add a new Album to the Music-Service"
      description: ""
      operationId: "addAlbum"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Album object that needs to be added to the Music Service"
        required: true
        schema:
          $ref: "#/definitions/Album"
      responses:
        "405":
          description: "Invalid input"
        "201": 
          description: "song created"


##Update the Actor
  /artist/update/{artist_id}:
    put:
      tags:
      - "artist"
      summary: "Update Artist"
      description: "Update the existing Artist"
      operationId: "Update Artist"
      produces:
      - "application/json"
      parameters:
      - name: "artist_id"
        in: "path"
        description: "provide the artist_id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Artist object that needs to be added to the Service"
        required: true
        schema:
          $ref: "#/definitions/Artist"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Artist"
        "400":
          description: "Invalid status value"


##Update the Song
  /album/update/{album_id}:
    put:
      tags:
      - "album"
      summary: "Update Album"
      description: "Update the existing Album"
      operationId: "Update Album"
      produces:
      - "application/json"
      parameters:
      - name: "album_id"
        in: "path"
        description: "provide the album_id that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Album object that needs to be added to the Service"
        required: true
        schema:
          $ref: "#/definitions/Album"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Album"
        "400":
          description: "Invalid status value"

###Find all Artists
  /artist/all/:
    get:
      tags:
      - "artist"
      summary: "Find All Artist"
      description: "Find All Artist"
      operationId: "Find All Artist"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"


###Find all Albums
  /album/all/:
    get:
      tags:
      - "album"
      summary: "Find All Albums"
      description: "Find All Albums"
      operationId: "Find All Albums"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Album"

##Find album By Year Released
  /album/yearReleased/{yearReleased}:
    get:
      tags:
      - "album"
      summary: "Find Albums By Year Released"
      description: "Returns List of Albums"
      operationId: "getAlbumsByYearReleased"
      produces:
      - "application/json"
      parameters:
      - name: "yearReleased"
        in: "path"
        description: "yearReleased to search For"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Album"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Album found"

##Find album By Year Released
  /artist/album/yearReleased/{yearReleased}:
    get:
      tags:
      - "artist"
      summary: "Find Artists By Year Released"
      description: "Returns List of Artists"
      operationId: "getArtistsByYearReleased"
      produces:
      - "application/json"
      parameters:
      - name: "yearReleased"
        in: "path"
        description: "yearReleased to search For"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Artist found"


  /album/id/{album_id}:
    get:
      tags:
      - "album"
      summary: "Find Album by ID"
      description: "Returns a single Album"
      operationId: "getAlbumById"
      produces:
      - "application/json"
      parameters:
      - name: "album_id"
        in: "path"
        description: "ID of Album to Search For"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Album"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "No Album found"
    ## Delete album by Id
    delete:
      tags:
      - "album"
      summary: "Deletes a Album"
      description: ""
      operationId: "deleteAlbum"
      produces:
      - "application/json"
      parameters:
      - name: "album_id"
        in: "path"
        description: "ID of Album to Delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "No Album found"

  /artist/id/{artist_id}:
    get:
      tags:
      - "artist"
      summary: "Find Artist by ID"
      description: "Returns a single Artist"
      operationId: "getArtistById"
      produces:
      - "application/json"
      parameters:
      - name: "artist_id"
        in: "path"
        description: "ID of Artist to Search For"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Artist"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "No Artist found"
    ## Delete album by Id
    delete:
      tags:
      - "artist"
      summary: "Deletes a Artist"
      description: ""
      operationId: "delte Artist"
      produces:
      - "application/json"
      parameters:
      - name: "artist_id"
        in: "path"
        description: "ID of Artist to Delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "No Artist found"

##Search for a Artist Using Aritst Name
  /artist/name/{artist_name}:
    get:
      tags:
      - "artist"
      summary: "Find Artist by Artist Name"
      description: "Returns a single Artist"
      operationId: "getArtistByName"
      produces:
      - "application/json"
      parameters:
      - name: "artist_name"
        in: "path"
        description: "artist_name  to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Artist"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Artist found"

  /artist/album/name/{album_name}:
    get:
      tags:
      - "artist"
      summary: "Find Artists by Album Name"
      description: "Returns List of Artists"
      operationId: "getArtistsByAlbumName"
      produces:
      - "application/json"
      parameters:
      - name: "album_name"
        in: "path"
        description: "artist name  to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"
        "400":
          description: "Invalid Album Name supplied"
        "404":
          description: "No Artist found"

  /artist/album/id/{album_id}:
    get:
      tags:
      - "artist"
      summary: "Find Artists by Album ID"
      description: "Returns List of Artists"
      operationId: "getArtistsByAlbumID"
      produces:
      - "application/json"
      parameters:
      - name: "album_id"
        in: "path"
        description: "album ID to search For"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"
        "400":
          description: "Invalid Album Name supplied"
        "404":
          description: "No Artist found"


##Search for a Album Using Album Name
  /album/name/{album_name}:
    get:
      tags:
      - "album"
      summary: "Find Album by Album Name"
      description: "Returns a single Album"
      operationId: "getAlbumByAlbumName"
      produces:
      - "application/json"
      parameters:
      - name: "album_name"
        in: "path"
        description: "album name  to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Album"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Album found"

  /artist/song/name/{song_name}:
    get:
      tags:
      - "artist"
      summary: "Find Artist by Song Name"
      description: "Returns List of Artists"
      operationId: "getArtistBySongName"
      produces:
      - "application/json"
      parameters:
      - name: "song_name"
        in: "path"
        description: "song name  to search For"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Album found"

  /artist/song/id/{song_id}:
    get:
      tags:
      - "artist"
      summary: "Find Artist by Song Id"
      description: "Returns List of Artists"
      operationId: "getArtistBySongId"
      produces:
      - "application/json"
      parameters:
      - name: "song_id"
        in: "path"
        description: "song ID to return"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Artist found"

  /artist/song/track/{track_id}:
    get:
      tags:
      - "artist"
      summary: "Find Artist by Song Track"
      description: "Returns List of Artist"
      operationId: "getArtistByTrackId"
      produces:
      - "application/json"
      parameters:
      - name: "track_id"
        in: "path"
        description: "track id of the song to look for"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Artist"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Artist found"



  /album/song/name/{song_name}:
    get:
      tags:
      - "album"
      summary: "Find Album by Song Name"
      description: "Returns List of Albums"
      operationId: "getAlbumBySongName"
      produces:
      - "application/json"
      parameters:
      - name: "song_name"
        in: "path"
        description: "song name  to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Album"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Album found"

  /album/song/id/{id}:
    get:
      tags:
      - "album"
      summary: "Find Album by Song Id"
      description: "Returns List of Albums"
      operationId: "getAlbumBySongId"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "song name  to return"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Album"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Album found"

  /album/song/track/{track_id}:
    get:
      tags:
      - "album"
      summary: "Find Album by Song Track"
      description: "Returns List of Albums"
      operationId: "getAlbumBySongTrack"
      produces:
      - "application/json"
      parameters:
      - name: "track_id"
        in: "path"
        description: "track id of the song to look for"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Album"
        "400":
          description: "Invalid Name supplied"
        "404":
          description: "No Album found"


definitions:
  Song:
    type: "object"
    required:
    - "song_name"
    - "track_id"
    properties:
      song_id:
        type: "integer"
        format: "int64"
        description: songId
        example: 1
      track_id:
        type: "integer"
        format: "int64"
        description: songTrack
        example: 20
      song_name:
        type: "string"
        description: songName
        example: new Mercy
    xml:
      name: "Song"
  Album:
    type: "object"
    required:
    - "name"
    - "songs"
    properties:
      album_id:
        type: "integer"
        format: "int64"
      album_name:
        type: "string"
        example: "doggie album"
      songs:
        type: array
        xml:
          name: "songs"
          wrapped: true
        items: 
          $ref: "#/definitions/Song"
    xml:
      name: "Album"
  Artist:
    type: "object"
    required:
    - "name"
    - "albums"
    properties:
      artist_id:
        type: "integer"
        format: "int64"
      artist_name:
        type: "string"
        example: "artist_name"
      albums:
        type: array
        xml:
          name: "albums"
          wrapped: true
        items: 
          $ref: "#/definitions/Album"
    xml:
      name: "Album"  
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"